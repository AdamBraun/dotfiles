#!/usr/bin/env node
const home = require('os').homedir()
const { exec, execSync } = require('child_process');
const { existsSync, mkdirSync, readFileSync, symlinkSync } = require('fs')
const path = require('path')

const projectAbsolutePath = relativePath => path.join(home, 'projects', relativePath)

const projects = {
    teachme: projectAbsolutePath('sdk/teachme'),
    sdkRuntime: projectAbsolutePath('sdk/player-sdk/sdk'),
    sdkLoader: projectAbsolutePath('sdk/player-sdk/loader'),
    sdkRoot: projectAbsolutePath('sdk/player-sdk'),
    'teachme-ui': projectAbsolutePath('teachme-ui'),
    'communication': projectAbsolutePath('sdk/sdk-app-communication')
}

const logDir = path.join('/', 'tmp', 'teachme')

function run(projectDir) {
    console.log('spawning ', projectDir)
    if (!existsSync(logDir)){
        mkdirSync(logDir);
    }
    const logFile = path.join(logDir, projectDir.replace(/.*\/projects\/(.*)/, '$1').replace('/', '__'))

    const {scripts} = require(`${projectDir}/package.json`)
    let cmd
    if(scripts.start) {
        cmd = `eval "$(fnm env)" && fnm use && npm start &> ${logFile}`
    } else if(scripts.build) {
        cmd = 'npm run build'
    }
    exec(cmd, {cwd: projectDir}, (error, stdout, stderr) => {
        console.log({projectDir, error, stdout, stderr})
        if(error) {
            console.log(error)
            console.log('#'.repeat(20))
            console.log({cmd, projectDir})
            console.log('#'.repeat(20))
            console.log(readFileSync(logFile))
            process.exit(1)
        }
    })
}

function forceLink(target, path) {
    if(existsSync(path)) {
        execSync(`rm -rf ${path}`)
    }
    symlinkSync(target, path)
}
function createLinks() {
    const options = {stdio: [0,1,2], encoding: 'utf8'}
    const command = `eval "$(fnm env)" && fnm use 12 && npm link`
    forceLink(projects.sdkLoader, path.join(projects.teachme, 'node_modules', '@walkme', 'sdk'))
    forceLink(projects.sdkLoader, path.join(projects['teachme-ui'], 'node_modules', '@walkme', 'sdk'))
    forceLink(projects.communication, path.join(projects.sdkRuntime, 'node_modules', 'wm-sdk-app-communication'))
    forceLink(projects.communication, path.join(projectAbsolutePath('mt.player'), 'node_modules', 'wm-sdk-app-communication'))
}

createLinks()
for(const dir of [
    projects.teachme,
    projects['teachme-ui'],
    projects.sdkRoot
]) {
    run(dir)
}
