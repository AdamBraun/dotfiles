#!/bin/zsh
function mru(){
    mrufile=${2:-.mru}
    if [[ ! -f $HOME/$mrufile ]]; then
        echo $HOME/$mrufile does not exist
        return
    fi
    #print file inverse order(tail) | put line numbers (nl) | fzf with sorting | remove line number from selected file (sed)
    fzfresult=$(tail -r $HOME/$mrufile | nl | fzf --no-sort --exact \
        --preview 'echo {} | sed -E '\''s#^[^/]*##'\'' | xargs $DOTFILES/bin/preview.rb -v' \
        --preview-window 'top:50%' \
        --header 'CTRL-o - open without abort(LESS) :: CTRL-s - toggle sort :: CTRL-g - toggle preview window' \
        --bind 'ctrl-s:toggle-sort,ctrl-g:toggle-preview,ctrl-o:execute:$DOTFILES/fzf/fhelp.sh {} > /dev/tty' | sed -E 's#[^/]*(/.*$)#''\1''#')
    filename=$(sed -E 's#(^[^:]*).*#\1#' <<< $fzfresult)
    if [[ -f $filename ]]; then
        if [[ $fzfresult =~ ':[[:digit:]]+$' ]]; then
            linenum=$(sed 's#^[^:]*:#+#' <<< $fzfresult)
        fi
        #cd into directory of file (usage: "mru 1")
        if [[ $1 -eq 1 ]]; then
            cd $(sed -E 's#(.*)/[^/]+#\1#' <<< $filename)
            echo $(sed -E 's#(.*)/[^/]+#\1#' <<< $filename)
        fi
        #open selected file in vim AND cd into git's root folder for project of selected file
        vim $linenum $filename -c 'silent :CDR'
    fi
}
function mrw(){
    mru 0 '.mrw'
}
function mrv(){
    mru 0 '.mru'
}
alias 1m='mru 1'
function removeMruInvalidEntries(){
    for f in $HOME/.mru $HOME/.mrw
    do
        cp $f /tmp/tmpmru; 
        while read line; do
            currFileName=$(sed -E 's/^([^:]*).*/\1/' <<< $line)
            if [[ ! -f $currFileName ]]; then
                echo removing $currFileName  
                grep -v $line /tmp/tmpmru > /tmp/tmpmruhelp
                rm /tmp/tmpmru
                mv /tmp/tmpmruhelp /tmp/tmpmru
            fi
        done < $f
        cp /tmp/tmpmru $f
    done
}
