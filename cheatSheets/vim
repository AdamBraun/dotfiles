############   indentation    ##########
Ctrl-z, fg         ==> suspend vim, go back into it
zj, zk             ==> jump no next/prev fold
mx, mX             ==> mark (local buffer) position "x" to jump there using "'x", usint uppercase "X" mark it globally to jump there from any file
Ctrl-o, Ctrl-i     ==> jump backwards, jump forwards, :jumps to view jump list
sn                 ==> mapped to easymotion-sn: type a sequence of characters and jump to it
ss                 ==> mapped to easymotion-prefix: type a movement to find matches
,fs                ==> 
g;                 ==> go to last edit position. works for multiple "jumps" too
ma                 ==> (m- mark, a - name of mark). Later to return to the position type `a
Ctrl-V             ==> visual block mode
xgg=yG             ==> fix indentation from line x to line y
:history Ctrl+f    ==> show history in command line window
:Git! ...          ==> result of git command is shown in vim 
z{some other key}  ==> run ":h z" to see nice stuff
z{height}<CR>      ==>   redraw, make window {height} lines high
ex-cmd-index       ==> run help on this!!
:set list          ==> toggle invisible characters
Ctrl-w_Ctrl-r      ==> rotate split windows location
print key mappings to file
    :redir! > vim_keys.txt
    :silent verbose map
    :redir END
end print key mappings
["x]D			    ==> Delete the characters under the cursor until the end
					of the line and [count]-1 more lines [into register
					x]; synonym for "d$".
					(not |linewise|)
					When the '#' flag is in 'cpoptions' the count is
					ignored.

Cursor movement

h - move left
j - move down
k - move up
l - move right
w - jump by start of words (punctuation considered words)
W - jump by words (spaces separate words)
e - jump to end of words (punctuation considered words)
E - jump to end of words (no punctuation)
b - jump backward by words (punctuation considered words)
B - jump backward by words (no punctuation)
0 - (zero) start of line
^ - first non-blank character of line
$ - end of line
G - Go To command (prefix with number - 5G goes to line 5)

Note: Prefix a cursor movement command with a number to repeat it. For example, 4j moves down 4 lines.

Insert Mode - Inserting/Appending text

i - start insert mode at cursor
I - insert at the beginning of the line
a - append after the cursor
A - append at the end of the line
o - open (append) blank line below current line (no need to press return)
O - open blank line above current line
ea - append at end of word
Esc - exit insert mode


Editing

r - replace a single character (does not use insert mode)
J - join line below to the current one
cc - change (replace) an entire line
cw - change (replace) to the end of word
c$ - change (replace) to the end of line
s - delete character at cursor and subsitute text
S - delete line at cursor and substitute text (same as cc)
xp - transpose two letters (delete and paste, technically)
u - undo
. - repeat last command


Marking text (visual mode)

v - start visual mode, mark lines, then do command (such as y-yank)
V - start Linewise visual mode
o - move to other end of marked area
Ctrl+v - start visual block mode
O - move to Other corner of block
aw - mark a word
ab - a () block (with braces)
aB - a {} block (with brackets)
ib - inner () block
iB - inner {} block
Esc - exit visual mode


Visual commands

&gt; - shift right
&lt; - shift left
y - yank (copy) marked text
d - delete marked text
~ - switch case


Cut and Paste

yy - yank (copy) a line
2yy - yank 2 lines
yw - yank word
y$ - yank to end of line
p - put (paste) the clipboard after cursor
P - put (paste) before cursor
dd - delete (cut) a line
dw - delete (cut) the current word
x - delete (cut) current character


Exiting

:w - write (save) the file, but don't exit
:wq - write (save) and quit
:q - quit (fails if anything has changed)
:q! - quit and throw away changes


Search/Replace

/pattern - search for pattern
                                 ?pattern - search backward for pattern
                                                                           n - repeat search in same direction
N - repeat search in opposite direction
:%s/old/new/g - replace all old with new throughout file
:%s/old/new/gc - replace all old with new throughout file with confirmations


Working with multiple files

:e filename - Edit a file in a new buffer
:bnext (or :bn) - go to next buffer
:bprev (of :bp) - go to previous buffer
:bd - delete a buffer (close a file)
:sp filename - Open a file in a new buffer and split window
ctrl+ws - Split windows
ctrl+ww - switch between windows
ctrl+wq - Quit a window
ctrl+wv - Split windows vertically


other
:map - list current keybindings
:help index - find all keybindings


##########################################################################################
http://stackoverflow.com/questions/1276403/simple-vim-commands-you-wish-youd-known-earlier
select                                   v                                     
select row(s)                            SHIFT + v                             
select blocks (columns)                  CTRL  + v                             
indent selected text                     >                                     
unindent selected text                   <                                     
list buffers                             :ls                                   
open buffer                              :bN (N = buffer number)               
print                                    :hardcopy                             
open a file                              :e /path/to/file.txt                  
                                         :e C:\Path\To\File.txt                
sort selected rows                       :sort                                 
search for word under cursor             *                                     
open file under cursor                   gf                                    
  (absolute path or relative)                                                  
format selected code                     =                                     
select contents of entire file           ggVG                                  
convert selected text to uppercase       U                                     
convert selected text to lowercase       u                                     
invert case of selected text             ~                                     
convert tabs to spaces                   :retab                                
start recording a macro                  qX (X = key to assign macro to)       
stop recording a macro                   q                                       
playback macro                           @X (X = key macro was assigned to)    
replay previously played macro *         @@                                    
auto-complete a word you are typing **   CTRL + n                              
bookmark current place in file           mX (X = key to assign bookmark to)    
jump to bookmark                         `X (X = key bookmark was assigned to  
                                             ` = back tick/tilde key)          
show all bookmarks                       :marks                                
delete a bookmark                        :delm X (X = key bookmark to delete)   
delete all bookmarks                     :delm!                                 
split screen horizontally                :split                                
split screen vertically                  :vsplit                               
navigating split screens                 CTRL + w + j = move down a screen     
                                         CTRL + w + k = move up a screen       
                                         CTRL + w + h = move left a screen     
                                         CTRL + w + l = move right a screen    
close all other split screens            :only                                 

*  - As with other commands in vi, you can playback a macro any number of times.
     The following command would playback the macro assigned to the key `w' 100
     times: 100@w

** - Vim uses words that exist in your current buffer and any other buffer you 
     may have open for auto-complete suggestions.
