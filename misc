#!/bin/zsh
hash -d d=~/.dotfiles/
j() {
    if [ $(hash -d|cut -d= -f1|grep -c "^$1\$") = 0 ]; then
	fasd_cd -d "$@"
    else
	cd ~$1
    fi
}
function pullMyProjects(){
    skipnvm=1
    pullIfMineAndNotDirty() {
        if [[ $(git config --get remote.origin.url) =~ 'sudavid4' ]]; then
	    echo "\033[38;5;6m"$(pwd)"\033[0m"
            if [[ $(git diff --shortstat 2> /dev/null | tail -n1) == "" ]]; then
                git pull
            else
                echo "\033[38;5;9m"---------------IS DIRTY--------------------------"\033[0m"
            fi
        fi
    }
    scan () {
        curdir=$(pwd)
        for x in $*
        do
            [[ -d $x ]] && [[ -d ${x}/.git ]] && cd $x &> /dev/null && pullIfMineAndNotDirty "$x" 2> /dev/null
            cd $curdir &> /dev/null
        done
    }
    scan * 
    wait
    skipnvm=0
}

function encrypt(){
	if [ -f $1 ]; then
		openssl des -k ohencrypted -in $1 -out $1.enc && rm $1
	else
		echo no such file $1
	fi
}
function decrypt(){
	if [ -f $1 ]; then
		decfilename=${1%.enc}
        openssl des -d -k ohencrypted -in $decfilename.enc -out $decfilename && rm $1
    else
		echo no such file $1
	fi
}

function encryptdir(){
	if [ -d $1 ]; then
		for f in $1*; do
			encrypt $f
		done
	else
		echo no such directory $1
	fi

}

function decryptdir(){
	if [ -d $1 ]; then
		for f in $1*; do
			decrypt $f
		done
	else
		echo no such directory $1
	fi

}
function dirtyprojs(){
    skipnvm=1
    function _printdirty {
        local d="$1"
        [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]] && echo $(pwd);
    }

    function scan {
        curdir=$(pwd)
        for x in $*; do
            [[ -d $x ]] && [[ -d ${x}/.git ]] && cd $x &> /dev/null && _printdirty "$x" 2> /dev/null; cd $curdir &> /dev/null  
        done
    }
    scan * | grep -v 'running nvm' | grep '^/User.*'
    wait
    skipnvm=0
}

function put-color-by-pairity(){
    local pairity=$3
    if [[ $(expr ${pairity} % 2) == 0 ]]; then
        echo -n $1
    else
        echo -n $2
    fi
}
function branches(){
    local color_grey='\033[38;5;246m'
    local color_reset='\033[0m'
    local color_pinkish='\033[38;5;132m'
    local color_brownish='\033[38;5;95m'
    skipnvm=1
    curdir=$(pwd)
    let pairity=-1
    for x in *; do
        if [[ -d $x ]] && [[ -d ${x}/.git ]]; then
            cd $x &> /dev/null 
            put-color-by-pairity $color_grey $color_reset $pairity
            pairity=${pairity}+1
            [[ $(expr ${pairity} % 5) == 0 ]] && printf '\n'
            local bname=$(git rev-parse --abbrev-ref HEAD)
            if [[ $bname != *'master'* ]]; then
                put-color-by-pairity $color_pinkish $color_brownish $pairity
            fi
            printf '%s ' $x #print directory name
            printf '-%.0s' {1..$(( 60 - ${#x} ))} # {1..$(( 60 - ${#x} ))} is a string 1234...[60 - length of x]
            printf ' %s\n'  $bname #print branch name for directory x
            echo -n '\033[0m'
            cd $curdir &> /dev/null  
        fi
    done
    wait
    skipnvm=0
}
alias printbranches='branches'
alias printdirtyprojs='dirtyprojs'
alias printescapesequences='escape_ls'
alias printgitprompt='gitprompt'

function find_sort_latest_modified() {
  find . -type f -print0 | xargs -0 stat -f "%m %N" | sort -rn | head -100 | cut -f2- -d" "
}

function escape_ls(){
  for COLOR in {0..255}
  do
    for STYLE in "38;5"
    do
      TAG="\033[${STYLE};${COLOR}m"
      STR="${STYLE};${COLOR}"
      echo -n "${TAG}"'\\033['"${STR}"'m'"${NONE}  "
    done
    echo
  done
  echo reset with \\033[0m
}
alias resetnodedebugchrome='export NODE_DEBUG_OPTION=""'

function flagnodedebugchrome(){
  export NODE_DEBUG_OPTION=${1:-'--inspect-brk'}
}
alias setnodedebugchrome='flagnodedebugchrome'
function nodedebugchrome() {
export NODE_DEBUG_OPTION="--inspect"
osascript << 'END'
tell application "Google Chrome"
    activate
    open location "chrome://inspect"
    delay 1
    execute front window's active tab javascript "document.getElementById('node-frontend').click()"
end tell
END
}
function createTernProj(){
    echo '
{
  "ecmaVersion": 8,
  "libs": [
  ],
  "plugins": {
    "node": {},
    "modules": {},
    "es_modules": {},
    "node_resolve": {},
    "CommonJS": {},
    "doc_comment": {
      "fullDocs": true
    }
  }
}' > .tern-project
}
alias generateTernProject='createTernProj'
for f in $DOTFILES/cheatSheets/*
do
    if [[ -f $f ]]; then
        alias cheat$(basename $f)='cat '$f' | fzf'
    fi
done

function searchpdf() {
    find . -iname '*.pdf' -exec pdfgrep -n $@ {} +
}

function openuni() {
  osascript << 'END'
tell application "Google Chrome"
    activate
    open location "http://opal.openu.ac.il/course/view.php?id=38275"
    delay 1
    execute front window's active tab javascript "document.getElementsByName('p_sisma')[0].value = 'AniMaamin18'"
    execute front window's active tab javascript "document.getElementsByName('p_user')[0].value = 'sudavid4'"
    execute front window's active tab javascript "document.getElementsByName('p_mis_student')[0].value = '332519404'"
    execute front window's active tab javascript "document.getElementById('submit1').click()"
end tell
END
}

function opensheilta() {
  osascript << 'END'
tell application "Google Chrome"
    activate
    open location "https://sheilta.apps.openu.ac.il/pls/dmyopt2/course_info.courses"
    delay 1
    execute front window's active tab javascript "document.getElementsByName('p_sisma')[0].value = 'AniMaamin18'"
    execute front window's active tab javascript "document.getElementsByName('p_user')[0].value = 'sudavid4'"
    execute front window's active tab javascript "document.getElementsByName('p_mis_student')[0].value = '332519404'"
    execute front window's active tab javascript "document.querySelector('#login [type=\"submit\"]').click()"
end tell
END
}

