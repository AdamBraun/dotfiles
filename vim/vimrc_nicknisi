source $DOTFILES/vim/startup/plugins
source  $DOTFILES/vim/startup/tmp_stuff.vim
source $DOTFILES/vim/startup/gitstatus
" autocmd BufNewFile,BufRead .git/index execute 'source $DOTFILES/vim/startup/gitstatus'."\r" 
" save all files on focus lost, ignoring warnings about untitled buffers
" autocmd FocusLost,WinLeave * silent! wa
" au FocusGained,BufEnter,CursorHold * :silent! !

" }}}

" Section General {{{

" load plugins from vundle
" source ~/.vim/plugins.vim

" Abbreviations
abbr funciton function
abbr teh the
abbr tempalte template
abbr fitler filter

set nocompatible " not compatible with vi
set autoread " detect when a file is changed

" make backspace behave in a sane manner
set backspace=indent,eol,start

" set a map leader for more key combos
let mapleader = ','
let g:mapleader = ','

set history=1000 " change history to 1000
set textwidth=120

" Tab control
set noexpandtab " insert tabs rather than spaces for <Tab>
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'
set completeopt+=longest

if has('mouse')
    set mouse=a
    " set ttymouse=xterm2
endif

set clipboard=unnamed

" faster redrawing
set ttyfast

set diffopt+=vertical

" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

set laststatus=2 " show the satus line all the time

" }}}

" Section AutoGroups {{{
" file type specific settings
augroup configgroup
    autocmd!
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType html setlocal ts=4 sts=4 sw=4 noexpandtab indentkeys-=*<return>
    autocmd FileType jade setlocal ts=2 sts=2 sw=2 noexpandtab
    autocmd FileType markdown,textile setlocal textwidth=0 wrapmargin=0 wrap spell
    autocmd FileType .xml exe ":silent %!xmllint --format --recover - 2>/dev/null"
    autocmd FileType crontab setlocal nobackup nowritebackup

    " automatically resize panes on resize
    autocmd VimResized * exe 'normal! \<c-w>='
    autocmd BufWritePost .vimrc,.vimrc.local,init.vim source %
    autocmd BufWritePost .vimrc.local source %

    autocmd BufNewFile,BufRead *.ejs set filetype=html
    autocmd BufNewFile,BufRead *.ino set filetype=c
    autocmd BufNewFile,BufRead *.svg set filetype=xml
    autocmd BufNewFile,BufRead .babelrc set filetype=json
    autocmd BufNewFile,BufRead .jshintrc set filetype=json
    autocmd BufNewFile,BufRead .eslintrc set filetype=json
    autocmd BufNewFile,BufRead *.es6 set filetype=javascript

	" close help files on 'q'
	autocmd FileType help nnoremap q :bd<cr>

    " make quickfix windows take all the lower section of the screen
    " when there are multiple windows open
    autocmd FileType qf wincmd J

    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    let g:markdown_fenced_languages = ['css', 'javascript', 'js=javascript', 'json=javascript', 'stylus', 'html']

    " autocmd! BufEnter * call ApplyLocalSettings(expand('<afile>:p:h'))

    autocmd BufNewFile,BufRead,BufWrite *.md syntax match Comment /\%^---\_.\{-}---$/

    autocmd! BufWritePost * Neomake
augroup END

" }}}

" Section User Interface {{{

" code folding settings
set foldmethod=syntax " fold based on indent
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1


set so=7 " set 7 lines to the cursors - when moving vertical
set wildmenu " enhanced command line completion
set hidden " current buffer can be put into background
set showcmd " show incomplete commands
set noshowmode " don't show which mode disabled for PowerLine
set wildmode=list:longest " complete files like a shell
set scrolloff=3 " lines of text around cursor
set shell=$SHELL
set cmdheight=1 " command bar height

set title " set terminal title

" Searching
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter
set hlsearch
set incsearch " set incremental search, like modern browsers
set nolazyredraw " don't redraw while executing macros

set magic " Set magic on, for regex

"set showmatch " show matching braces
"set mat=2 " how many tenths of a second to blink

" error bells
set noerrorbells
set visualbell
set t_vb=
"????david
set tm=500

" switch syntax highlighting on
syntax on

let base16colorspace=256  " Access colors present in 256 colorspace"
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors"
execute "colorscheme ".$THEME
"highlight Comment cterm=italic
highlight htmlArg cterm=italic

set number " show line numbers
"set relativenumber " show relative line numbers

set wrap "turn on line wrapping
set wrapmargin=8 " wrap lines when coming within n characters from side
set linebreak " set soft wrapping
set showbreak=… " show ellipsis at breaking

set autoindent " automatically set indent of new line
set smartindent

" }}}

" Section Mappings {{{

"david mappings
nmap <leader>e :!
nmap <leader>b :bn<cr>:bd #<cr>
" increase decrease vertica split by +,_
nnoremap + 5<C-w>>
nnoremap - 5<C-w><

" remap esc
inoremap jk <esc>

" markdown to html
nmap <leader>md :%!markdown --html4tags <cr>

" remove extra whitespace
nmap <leader><space> :%s/\s\+$<cr>

" wipout buffer

" shortcut to save
nmap <leader>, :w<cr>

" disable Ex mode
noremap Q <NOP>

" set paste toggle
"???david
set pastetoggle=<F6>

" toggle paste mode
"map <leader>v :set paste!<cr>

" edit ~/.config/nvim/init.vim
map <leader>ev :e! ~/.config/nvim/init.vim<cr>
" edit gitconfig
map <leader>eg :e! ~/.gitconfig<cr>

" clear highlighted search
noremap <space> :set hlsearch! hlsearch?<cr>

" activate spell-checking alternatives
nmap ;s :set invspell spelllang=en<cr>

" toggle invisible characters
set list
set listchars=tab:→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
highlight SpecialKey ctermbg=none ctermfg=8 " make the highlighting of tabs less annoying
highlight NonText ctermbg=none ctermfg=8
set showbreak=↪

"toggle hide show invisible characters
nmap <leader>l :set list!<cr>

" Textmate style indentation
"???david this doesn't workd, why?
vmap <leader>[ <gv
vmap <leader>] >gv
nmap <leader>[ <<
nmap <leader>] >>

" switch between current and last buffer
nmap <leader>. <c-^>

" enable . command in visual mode
vnoremap . :normal .<cr>

map <silent> <C-h> :call WinMove('h')<cr>
map <silent> <C-j> :call WinMove('j')<cr>
map <silent> <C-k> :call WinMove('k')<cr>
map <silent> <C-l> :call WinMove('l')<cr>

map <leader>wc :wincmd q<cr>

" toggle cursor line
nnoremap <leader>i :set cursorline!<cr>

" scroll the viewport faster
nnoremap <C-e> :call smooth_scroll#down(9, 0, 6)<CR>
nnoremap <C-y>  :call smooth_scroll#up(9, 0, 6)<CR>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

" search for word under the cursor
"david ==> search for word under cursor
nnoremap <leader>/ "fyiw :/<c-r>f<cr>

" inoremap <tab> <c-r>=Smart_TabComplete()<CR>

map <leader>r :call RunCustomCommand()<cr>
" map <leader>s :call SetCustomCommand()<cr>
let g:silent_custom_command = 0

" helpers for dealing with other people's code
nmap \t :set ts=4 sts=4 sw=4 noet<cr>
nmap \s :set ts=4 sts=4 sw=4 et<cr>

"!!!david ==> interesting, strange, worth looking at, probably I don't want it
"nmap <leader>w :setf textile<cr> :Goyo<cr>

" }}}

" Section Functions {{{

" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

"david ==> make base16 :colorscheme command actualy chage the blody color
autocmd ColorScheme base16* execute 'silent !source $DOTFILES/.config/base16-shell/scripts/'.g:colors_name.'.sh'
"consider: antares, birds-of-paradise, bluedrake, bvemu, darkburn
au FilterWritePre * if &diff | colorscheme OceanicNext | endif
" recursively search up from dirname, sourcing all .vimrc.local files along the way
function! ApplyLocalSettings(dirname)
    " convert windows paths to unix style
    let l:curDir = substitute(a:dirname, '\\', '/', 'g')

    " walk to the top of the dir tree
    let l:parentDir = strpart(l:curDir, 0, strridx(l:curDir, '/'))
    if isdirectory(l:parentDir)
        call ApplyLocalSettings(l:parentDir)
    endif

    " now walk back down the path and source .vimsettings as you find them.
    " child directories can inherit from their parents
    let l:settingsFile = a:dirname . '/.vimrc.local'
    if filereadable(l:settingsFile)
        exec ':source' . l:settingsFile
    endif
endfunction

" smart tab completion
function! Smart_TabComplete()
    let line = getline('.')                         " current line

    let substr = strpart(line, -1, col('.')+1)      " from the start of the current
    " line to one character right
    " of the cursor
    let substr = matchstr(substr, '[^ \t]*$')       " word till cursor
    if (strlen(substr)==0)                          " nothing to match on empty string
        return '\<tab>'
    endif
    let has_period = match(substr, '\.') != -1      " position of period, if any
    let has_slash = match(substr, '\/') != -1       " position of slash, if any
    if (!has_period && !has_slash)
        return '\<C-X>\<C-P>'                         " existing text matching
    elseif ( has_slash )
        return '\<C-X>\<C-F>'                         " file matching
    else
        return '\<C-X>\<C-O>'                         " plugin matching
    endif
endfunction

" execute a custom command
function! RunCustomCommand()
    up
    if g:silent_custom_command
        execute 'silent !' . s:customcommand
    else
        execute '!' . s:customcommand
    endif
endfunction

function! SetCustomCommand()
    let s:customcommand = input('Enter Custom Command$ ')
endfunction

function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction

function! HiInterestingWord(n)
    " Save our location.
    normal! mz

    " Yank the current word into the z register.
    normal! "zyiw

    " Calculate an arbitrary match ID.  Hopefully nothing else is using it.
    let mid = 86750 + a:n

    " Clear existing matches, but don't worry if they don't exist.
    silent! call matchdelete(mid)

    " Construct a literal pattern that has to match at boundaries.
    let pat = '\V\<' . escape(@z, '\') . '\>'

    " Actually match the words.
    call matchadd("InterestingWord" . a:n, pat, 1, mid)

    " Move back to our original location.
    normal! `z
endfunction

nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>

hi def InterestingWord1 guifg=#000000 ctermfg=16 guibg=#ffa724 ctermbg=214
hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195

function! HtmlUnEscape()
  silent s/&lt;/</eg
  silent s/&gt;/>/eg
  silent s/&amp;/\&/eg
endfunction

nnoremap <silent> <leader>u :call HtmlUnEscape()<cr>

" }}}

" Section Plugins {{{

" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=0
" show hidden files in NERDTree
let NERDTreeShowHidden=1
" remove some files by extension
let NERDTreeIgnore = ['\.js.map$']
" Toggle NERDTree
nmap <silent> <leader>k :NERDTreeToggle<cr>
" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>

" map fuzzyfinder (CtrlP) plugin
" nmap <silent> <leader>t :CtrlP<cr>
nmap <silent> <leader>r :CtrlPBuffer<cr>
let g:ctrlp_map='<leader>t'
let g:ctrlp_dotfiles=1
let g:ctrlp_working_path_mode = 'ra'

" Fugitive Shortcuts
nmap <silent> <leader>gs :Gstatus<cr>
nmap <leader>ge :Gedit<cr>
nmap <silent><leader>gr :Gread<cr>
nmap <silent><leader>gb :Gblame<cr>

" toggle Limelight
nmap <leader>f :Limelight!!<cr>

let g:neomake_javascript_jshint_maker = {
    \ 'args': ['--verbose'],
    \ 'errorformat': '%A%f: line %l\, col %v\, %m \(%t%*\d\)',
\ }

let g:neomake_typescript_tsc_maker = {
    \ 'args': ['-m', 'commonjs', '--noEmit' ],
    \ 'append_file': 0,
    \ 'errorformat':
        \ '%E%f %#(%l\,%c): error %m,' .
        \ '%E%f %#(%l\,%c): %m,' .
        \ '%Eerror %m,' .
        \ '%C%\s%\+%m'
\ }

autocmd FileType javascript let g:neomake_javascript_enabled_makers = findfile('.jshintrc', '.;') != '' ? ['jshint'] : ['eslint']
" let g:neomake_javascript_enabled_makers = ['jshint', 'jscs']
" let g:neomake_javascript_enabled_makers = ['eslint']

" CtrlP ignore patterns
" let g:ctrlp_custom_ignore = {
"             \ 'dir': '\.git$\|node_modules$\|bower_components$\|\.hg$\|\.svn$',
"             \ 'file': '\.exe$\|\.so$'
"             \ }
" only show files that are not ignored by git
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" search the nearest ancestor that contains .git, .hg, .svn
let g:ctrlp_working_path_mode = 2


" airline options
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='base16'

" don't hide quotes in json files
let g:vim_json_syntax_conceal = 0


let g:SuperTabCrMapping = 0

if (has("gui_running"))
    set guioptions=egmrt
    set background=light
    colorscheme solarized
    let g:airline_left_sep=''
    let g:airline_right_sep=''
    let g:airline_powerline_fonts=0
    let g:airline_theme='solarized'
endif

call ApplyLocalSettings(expand('.'))

" }}}


" vim:foldmethod=marker:foldlevel=0



















" Change the color scheme from a list of color scheme names.
" Version 2010-09-12 from http://vim.wikia.com/wiki/VimTip341
" Press key:
"   F8                next scheme
"   Shift-F8          previous scheme
"   Alt-F8            random scheme
" Set the list of color schemes used by the above (default is 'all'):
"   :SetColors all              (all $VIMRUNTIME/colors/*.vim)
"   :SetColors my               (names built into script)
"   :SetColors blue slate ron   (these schemes)
"   :SetColors                  (display current scheme names)
" Set the current color scheme based on time of day:
"   :SetColors now
if v:version < 700 || exists('loaded_setcolors') || &cp
  finish
endif

let loaded_setcolors = 1
let s:mycolors = ['0x7A69_dark', '256-gra', '256-jungle', '256_noir', '3dglasses', 'Benokai', 'BlackSea', 'C64', 'CandyPaper', 'Chasing_Logic', 'ChocolateLiquor', 'ChocolatePapaya', 'CodeFactoryv3', 'DevC++', 'Dev_Delight', 'Monokai', 'MountainDew', 'OceanicNext', 'PapayaWhip', 'PaperColor', 'Revolution', 'SlateDark', 'Spink', 'SweetCandy', 'Tomorrow-Night-Blue', 'Tomorrow-Night-Bright', 'Tomorrow-Night-Eighties', 'Tomorrow-Night', 'Tomorrow', 'VIvid', 'abbott', 'abra', 'adam', 'adaryn', 'adobe', 'adrian', 'advantage', 'af', 'aiseered', 'alduin', 'anderson', 'anotherdark', 'ansi_blows', 'antares', 'apprentice', 'aqua', 'argonaut', 'ashen', 'asmanian_blood', 'astronaut', 'asu1dark', 'atom', 'automation', 'autumn', 'autumnleaf', 'babymate256', 'badwolf', 'base', 'base16-ateliercave', 'base16-atelierdune', 'base16-atelierestuary', 'base16-atelierforest', 'base16-atelierheath', 'base16-atelierlakeside', 'base16-atelierplateau', 'base16-ateliersavanna', 'base16-atelierseaside', 'base16-ateliersulphurpool', 'basic', 'bayQua', 'baycomb', 'bclear', 'beachcomber', 'beauty256', 'beekai', 'behelit', 'benlight', 'bensday', 'billw', 'biogoo', 'birds-of-paradise', 'black_angus', 'blackbeauty', 'blackboard', 'blackdust', 'blacklight', 'blazer', 'blink', 'blue', 'bluechia', 'bluedrake', 'bluegreen', 'blueprint', 'blueshift', 'bluez', 'blugrine', 'bmichaelsen', 'bocau', 'bog', 'borland', 'breeze', 'brogrammer', 'brookstream', 'brown', 'bubblegum-256-dark', 'bubblegum-256-light', 'bubblegum', 'buddy', 'burnttoast256', 'busierbee', 'busybee', 'buttercream', 'bvemu', 'bw', 'c', 'cabin', 'cake', 'cake16', 'calmar256-light', 'camo', 'campfire', 'candy', 'candycode', 'candyman', 'caramel', 'carrot', 'carvedwood', 'carvedwoodcool', 'cascadia', 'cgpro', 'chance-of-storm', 'charged-256', 'charon', 'chela_light', 'chlordane', 'chocolate', 'chrysoprase', 'ciscoacl', 'clarity', 'cleanphp', 'cleanroom', 'clearance', 'cloudy', 'clue', 'cobalt', 'cobalt2', 'cobaltish', 'coda', 'codeblocks_dark', 'codeburn', 'codeschool', 'coffee', 'coldgreen', 'colorer', 'colorful', 'colorful256', 'colorsbox-faff', 'colorsbox-greenish', 'colorsbox-material', 'colorsbox-stblue', 'colorsbox-stbright', 'colorsbox-steighties', 'colorsbox-stnight', 'colorscheme_template', 'colorzone', 'contrasty', 'cool', 'corn', 'corporation', 'crayon', 'cthulhian', 'custom', 'd8g_01', 'd8g_02', 'd8g_03', 'd8g_04', 'dante', 'dark-ruby', 'darkBlue', 'darkZ', 'darkblack', 'darkblue2', 'darkbone', 'darkburn', 'darkdot', 'darkeclipse', 'darker-robin', 'darkerdesert', 'darkocean', 'darkrobot', 'darkslategray', 'darkspectrum', 'darktango', 'darkzen', 'darth', 'dawn', 'deepsea', 'delek', 'delphi', 'denim', 'derefined', 'desert', 'desert256', 'desert256v2', 'desertEx', 'desertedocean', 'desertedoceanburnt', 'desertink', 'detailed', 'devbox-dark-256', 'deveiate', 'developer', 'disciple', 'distinguished', 'django', 'donbass', 'doorhinge', 'doriath', 'dual', 'dull', 'duotone-dark', 'duotone-darkcave', 'duotone-darkdesert', 'duotone-darkearth', 'duotone-darkforest', 'duotone-darkheath', 'duotone-darklake', 'duotone-darkmeadow', 'duotone-darkpark', 'duotone-darkpool', 'duotone-darksea', 'duotone-darkspace', 'dusk', 'earendel', 'earth', 'earthburn', 'eclipse', 'eclm_wombat', 'ecostation', 'editplus', 'edo_sea', 'ego', 'ekin', 'ekvoli', 'elda', 'elise', 'elisex', 'elrodeo', 'elrond', 'emacs', 'enigma', 'enzyme', 'erez', 'eva', 'eva01', 'evening', 'evening_2', 'evolution', 'far', 'felipec', 'feral', 'fine_blue', 'flatcolor', 'flatland', 'flatlandia', 'flattened_dark', 'flattened_light', 'flattown', 'flattr', 'flatui', 'fnaqevan', 'fog', 'fokus', 'forneus', 'freya', 'frood', 'frozen', 'fruidle', 'fruit', 'fruity', 'fu', 'fx', 'gardener', 'gemcolors', 'genericdc-light', 'genericdc', 'gentooish', 'getafe', 'getfresh', 'github', 'gobo', 'golded', 'golden', 'google', 'gor', 'gotham', 'gotham256', 'gothic', 'grape', 'gravity', 'graywh', 'grb256', 'greens', 'greenvision', 'grey2', 'greyblue', 'grishin', 'gruvbox', 'gryffin', 'guardian', 'guepardo', 'h80', 'habiLight', 'harlequin', 'heliotrope', 'hemisu', 'herald', 'heroku-terminal', 'heroku', 'herokudoc-', 'herokudoc', 'hilal', 'holokai', 'hornet', 'hybrid-light', 'hybrid', 'hybrid_material', 'hybrid_reverse', 'iangenzo', 'ibmedit', 'icansee', 'iceberg', 'impact', 'impactG', 'impactjs', 'industrial', 'industry', 'ingretu', 'inkpot', 'inori', 'ir_black', 'ironman', 'itg_flat', 'jaime', 'jammy', 'janah', 'jelleybeans', 'jellybeans', 'jellyx', 'jhdark', 'jhlight', 'jiks', 'kalahari', 'kalisi', 'kalt', 'kaltex', 'kate', 'kellys', 'khaki', 'kib_darktango', 'kib_plastic', 'kiss', 'kkruby', 'kolor', 'kruby', 'kyle', 'laederon', 'landscape', 'lapis256', 'last256', 'late_evening', 'lazarus', 'legiblelight', 'leglight2', 'leo', 'less', 'lettuce', 'leya', 'lightcolors', 'lightning', 'lilac', 'lilydjwg_dark', 'lilydjwg_green', 'lilypink', 'lingodirector', 'liquidcarbon', 'literal_tango', 'lizard', 'lizard256', 'lodestone', 'loogica', 'louver', 'lucid', 'lucius', 'luinnar', 'lumberjack', 'luna', 'lxvc', 'mac_classic', 'made_of_code', 'madeofcode', 'magicwb', 'mango', 'manuscript', 'manxome', 'marklar', 'maroloccio', 'mars', 'martin_krischik', 'material-theme', 'material', 'materialbox', 'materialtheme', 'matrix', 'maui', 'mayansmoke', 'mdark', 'mellow', 'meta5', 'metacosm', 'midnight', 'midnight2', 'miko', 'mint', 'mizore', 'mod8', 'mod_tcsoft', 'mojave', 'molokai', 'molokai_dark', 'monoacc', 'monochrome', 'monokai-chris', 'monokain', 'montz', 'moonshine', 'moonshine_lowcontrast', 'mophiaDark', 'mophiaSmoke', 'mopkai', 'moria', 'moss', 'motus', 'mrkn256', 'mrpink', 'mud', 'muon', 'mushroom', 'mustang', 'native', 'nature', 'navajo-night', 'navajo', 'nazca', 'nedit', 'nedit2', 'nefertiti', 'neon', 'neonwave', 'nerv-ous', 'neutron', 'neverland-darker', 'neverland', 'neverland2-darker', 'neverland2', 'neverness', 'nevfn', 'newspaper', 'newsprint', 'nicotine', 'night', 'nightVision', 'night_vision', 'nightflight', 'nightflight2', 'nightshimmer', 'nightsky', 'nightwish', 'no_quarter', 'northland', 'northsky', 'norwaytoday', 'nour', 'nuvola', 'obsidian', 'obsidian2', 'oceanblack', 'oceanblack256', 'oceandeep', 'oceanlight', 'olive', 'onedark', 'orange', 'osx_like', 'otaku', 'oxeded', 'pacific', 'paintbox', 'parsec', 'peaksea', 'pencil', 'penultimate', 'peppers', 'perfect', 'pf_earth', 'phd', 'phoenix', 'phphaxor', 'phpx', 'pic', 'pink', 'playroom', 'pleasant', 'potts', 'preto', 'pride', 'primary', 'print_bw', 'prmths', 'professional', 'proton', 'pspad', 'psql', 'pt_black', 'putty', 'pw', 'pyte', 'python', 'quagmire', 'radicalgoodspeed', 'railscasts', 'rainbow_fine_blue', 'rainbow_fruit', 'rainbow_neon', 'rakr-light', 'random', 'rastafari', 'rcg_gui', 'rcg_term', 'rdark-terminal', 'rdark', 'redblack', 'redstring', 'refactor', 'relaxedgreen', 'reliable', 'reloaded', 'revolutions', 'robinhood', 'rootwater', 'rtl', 'sand', 'sandydune', 'satori', 'saturn', 'scala', 'scheakur', 'scite', 'scooby', 'sea', 'sean', 'seashell', 'selenitic', 'seoul', 'seoul256-light', 'seoul256', 'seti', 'settlemyer', 'sexy-railscasts', 'sf', 'shades-of-teal', 'shadesofamber', 'shobogenzo', 'sienna', 'sierra', 'sift', 'silent', 'simple256', 'simple_b', 'simpleandfriendly', 'simplewhite', 'simplon', 'skittles_berry', 'skittles_dark', 'sky', 'smp', 'smpl', 'smyck', 'soda', 'softblue', 'softbluev2', 'softlight', 'sol-term', 'sol', 'solarized', 'sole', 'sonofobsidian', 'sonoma', 'sorcerer', 'soso', 'sourcerer', 'southernlights', 'southwest-fog', 'spacegray', 'spectro', 'spiderhawk', 'spring', 'sprinkles', 'stackoverflow', 'stingray', 'stonewashed-256', 'stonewashed-gui', 'strange', 'strawimodo', 'summerfruit', 'summerfruit256', 'sunburst', 'surveyor', 'swamplight', 'sweater', 'symfony', 'synic', 'tabula', 'tango-desert', 'tango-morning', 'tango', 'tango2', 'tangoX', 'tangoshady', 'taqua', 'tayra', 'tchaba', 'tchaba2', 'tcsoft', 'telstar', 'termschool', 'tesla', 'tetragrammaton', 'textmate16', 'thegoodluck', 'thestars', 'thor', 'thornbird', 'tibet', 'tidy', 'tir_black', 'tolerable', 'tomatosoup', 'tony_light', 'toothpik', 'torte', 'transparent', 'triplejelly', 'trivial256', 'trogdor', 'tropikos', 'turbo', 'tutticolori', 'twilight', 'twilight256', 'twitchy', 'two2tango', 'ubaryd', 'ubloh', 'umber-green', 'understated', 'underwater-mod', 'underwater', 'up', 'valloric', 'vanzan_color', 'vc', 'vcbc', 'vexorian', 'vibrantink', 'vilight', 'visualstudio', 'vividchalk', 'vj', 'void', 'vydark', 'vylight', 'wargrey', 'warm_grey', 'wasabi256', 'watermark', 'wellsokai', 'whitebox', 'whitedust', 'widower', 'win9xblueback', 'winter', 'wintersday', 'woju', 'wolfpack', 'wombat', 'wombat256', 'wombat256i', 'wombat256mod', 'wood', 'wuye', 'xemacs', 'xian', 'xmaslights', 'xoria256', 'xterm16', 'yaml', 'yeller', 'zazen', 'zen', 'zenburn', 'zenesque', 'zephyr', 'zmrok', 'znake']  " colorscheme names that we use to set color

" Set list of color scheme names that we will use, except
" argument 'now' actually changes the current color scheme.
function! s:SetColors(args)
  if len(a:args) == 0
	echo 'Current color scheme names:'
	let i = 0
	while i < len(s:mycolors)
	  echo '  '.join(map(s:mycolors[i : i+4], 'printf("%-14s", v:val)'))
	  let i += 5
	endwhile
  elseif a:args == 'all'
	let paths = split(globpath(&runtimepath, 'colors/*.vim'), "\n")
	let s:mycolors = map(paths, 'fnamemodify(v:val, ":t:r")')
	echo 'List of colors set from all installed color schemes'
  elseif a:args == 'my'
	let c1 = 'default elflord peachpuff desert256 breeze morning'
	let c2 = 'darkblue gothic aqua earth black_angus relaxedgreen'
	let c3 = 'darkblack freya motus impact less chocolateliquor'
	let s:mycolors = split(c1.' '.c2.' '.c3)
	echo 'List of colors set from built-in names'
  elseif a:args == 'now'
	call s:HourColor()
  else
	let s:mycolors = split(a:args)
	echo 'List of colors set from argument (space-separated names)'
  endif
endfunction

command! -nargs=* SetColors call s:SetColors('<args>')

" Set next/previous/random (how = 1/-1/0) color from our list of colors.
" The 'random' index is actually set from the current time in seconds.
" Global (no 's:') so can easily call from command line.
function! NextColor(how)
  call s:NextColor(a:how, 1)
endfunction

" Helper function for NextColor(), allows echoing of the color name to be
" disabled.
let g:current = -1
function! s:NextColor(how, echo_color)

	let g:current += 1
	try
	  execute 'colorscheme '.s:mycolors[g:current]
	catch /E185:/
	  call add(missing, s:mycolors[g:current])
	endtry
  redraw
	echo g:colors_name
endfunction

nnoremap <F8> :call NextColor(1)<CR>
nnoremap <S-F8> :call NextColor(-1)<CR>
nnoremap <A-F8> :call NextColor(0)<CR>

" Set color scheme according to current time of day.
function! s:HourColor()
  let hr = str2nr(strftime('%H'))
  if hr <= 3
	let i = 0
  elseif hr <= 7
	let i = 1
  elseif hr <= 14
	let i = 2
  elseif hr <= 18
	let i = 3
  else
	let i = 4
  endif
  let nowcolors = 'elflord morning desert evening pablo'
  execute 'colorscheme '.split(nowcolors)[i]
  redraw
  echo g:colors_name
endfunction
